@startuml

title
<img:images/IDPLogo-64.png> <u>IDP Server workflow - Authentication end point</u>
end title

skinparam sequenceArrowThickness 1
skinparam roundcorner 20
skinparam sequenceParticipant underline
skinparam maxMessageSize 400
skinparam ParticipantPadding 10

actor VersicherteR as V
participant AnwendungsFrontend as AnwFE
participant Fachdienst as FD

box #skyblue
participant IDP_Discovery as IDPDisc
participant IDP_Authorization as IDPAuth
participant IDP_Token as IDPToken
' actor IDP_Redirection as IDPRedir
endbox
' participant "OC SP/TSL Dienst" as OCSPD

autonumber "##) "


V -> AnwFE : start app

' note right #lightsalmon : Die Encrypt/Sign Zuordnungen sind nur grob und werden noch besser dokumentiert

== get discovery doc on app startup ==
AnwFE -> IDPDisc ++ : getDiscoveryDocument()
IDPDisc -> IDPDisc : buildDiscoveryDocument()
IDPDisc -> IDPDisc : signDiscoveryDocument()
note right #lightgreen : sign with PrK for certificate\nof type FD.SIG
AnwFE <-- IDPDisc -- : DiscoveryDocumentResponse
AnwFE -> AnwFE : checkSignature()

V -> AnwFE : request data from FD
== send code challenge and retrieve authentication challenge ==
activate AnwFE
AnwFE -> AnwFE : generateCodeVerifier()
AnwFE -> AnwFE : generateCodeChallenge()
note right #lightgreen : sha256
AnwFE -> IDPAuth ++ : getAuthenticationChallenge()\nGET /authorization client_id, state, redirecturl, code_challenge, scope, ...
deactivate AnwFE
IDPAuth -> IDPAuth : createChallenge
note left #lightgreen : sign with PrK for certificate\nof type FD.SIG
IDPAuth -> IDPAuth : getUserConsentText
IDPAuth --> AnwFE ++ : AuthenticationChallenge
deactivate IDPAuth

AnwFE -> V -- : displayUserConsent
V -> AnwFE ++ : confirmConsent
alt : request token code WITHOUT SSO Token
    AnwFE -> AnwFE : signChallenge
    note left #lightgreen : sign challenge with c.ch.aut/\nc.hci.aut/c.hp.aut\nsign token tbd in IDP-94\nno encryption (Ticket Spec?)
    AnwFE -> IDPAuth ++ : validateChallengeAndGetTokenCode()\n POST /authentication signed_challenge
    deactivate AnwFE
    IDPAuth -> IDPAuth : validate signature\nAuthenticationChallengeVerifier.verifyResponseAndThrowExceptionIfFail
    note left #lightgreen : validate challenge signature\nvalidate certificate\nvalidate token sig?
    IDPAuth -> IDPAuth : generateCode()
    note left #lightgreen : sign with PrK for certificate\nof type FD.SIG
    IDPAuth -> IDPAuth : generateSSOToken()
    IDPAuth --> AnwFE -- : send 302 redirect to token end point with code as query param and ssotoken
    note right : Laut spec wird der SSO Token \nhier zurÃ¼ckgeliefert, noch nicht implementiert
else : request token code WITH SSO Token
    AnwFE -> IDPAuth ++ : validateSSOTokenAndGetTokenCode()\n POST /authentication ssotoken
    deactivate AnwFE
    IDPAuth -> IDPAuth : validateSSOToken()
    IDPAuth -> IDPAuth: generateCode()
    note left #lightgreen : sign with PrK for certificate\nof type FD.SIG
    IDPAuth --> AnwFE -- : send 302 redirect to token end point with code as query param
end

== get tokens ==
activate AnwFE
AnwFE -> IDPToken ++ : getTokens()\nPOST /token code, code_verifier
deactivate AnwFE
IDPToken -> IDPToken : validateClientAndCodeVerifier()
note left #lightgreen : verify signature
IDPToken -> IDPToken : encryptAccessToken()
note left #lightgreen : no encryption\n(Spec Ticket?)
AnwFE <-- IDPToken -- : TokenResponse(Id and AccessToken)

== use access token in Fachdienst ==
activate AnwFE
AnwFE -> AnwFE : validateIdToken()
note right #lightgreen : no decryption\n(Spec Ticket?)
AnwFE -> FD ++ : sendAccessTokenAndRequestedFachdaten()
deactivate AnwFE
FD -> FD : decrypeAndValidateAccessToken()
FD -> FD : getClaims()
AnwFE <-- FD -- : Fachdaten
activate AnwFE
AnwFE -> V : displayFachDaten()
deactivate AnwFE


@enduml
